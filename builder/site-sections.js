import gulp from "gulp";
import gutil from "gulp-util";
import debug from "gulp-debug";
import named from "vinyl-named";
import rename from "gulp-rename";
import path from "path";
import sass from "gulp-sass";
import babel from "gulp-babel";
import gwebpack from "webpack-stream";
import webpack from "webpack";
import concat from "gulp-group-concat";
import uglify from "gulp-uglify-es";
import lazypipe from "lazypipe";
import gulpif from "gulp-if";
import filter from "gulp-filter";
import eslint from "gulp-eslint";
import folders from "./modules/build-folders"; //NOTE: custom module

import { siteSectionPaths as paths } from "./config/paths.config";
import * as babelConfig from "./config/babel.config";

function getUglifyOptions(folder) {
	return {
		output: {
			preamble: `/**
* !!! IMPORTANT !!!

* DO NOT EDIT THIS FILE DIRECTLY.
* Go to: ${path.join(__dirname, paths.src, folder)}

* To edit the correct files.
**/;

`,
			beautify: false
		}
	};
}

function concatJS(folder, done) {
	try {
		//Doing try catch because require throws if the file doesn't exist
		var sources = require(path.resolve(
			paths.src,
			folder,
			paths.concatConfigFileName
		));
	} catch (e) {
		gutil.log(paths.concatConfigFileName, "Not Found");
		return done();
	}

	var release = lazypipe().pipe(uglify, getUglifyOptions(folder));
	let src = [];
	for (let i in sources) {
		src = src.concat(sources[i]);
	}

	let sitejs = filter(["!node_modules/**"], {
		restore: true
	});

	return gulp
		.src(src, {
			cwd: path.resolve(paths.src, folder),
			root: path.resolve("./")
		})
		.pipe(sitejs)
		.pipe(babel(babelConfig))
		.pipe(sitejs.restore)
		.pipe(gulpif(process.env.NODE_ENV === "production", release()))
		.pipe(
			concat(sources, {
				newline: ";\n"
			})
		)
		.pipe(
			debug({
				title: `[site-sections] ${folder}`
			})
		)
		.pipe(gulp.dest(path.join(paths.dest.js, folder)));
}

function compileSASS(folder) {
	//ignores _filename.scss files, this can be removed and it still works, but the log shows all the _filename.scss files
	//var release = lazypipe(); TODO setup release functions
	return gulp
		.src([path.join(paths.src, folder, "sass/**/*.scss"), "!**/_*.scss"])
		.pipe(sass().on("error", sass.logError))
		.pipe(
			debug({
				title: `[site-sections] ${folder}`
			})
		)
		.pipe(gulp.dest(path.join(paths.dest.css, folder)));
}

function compileJS(folder) {
	var release = lazypipe().pipe(uglify, getUglifyOptions(folder));

	return gulp
		.src([path.join(paths.src, folder, `js/${folder}@(.js|.jsx)`)])
		.pipe(named()) //attach file names to the gulp file records
		.pipe(gwebpack(require("./config/build.webpack.config"), webpack))
		.pipe(gulpif(process.env.NODE_ENV === "production", release()))
		.pipe(
			debug({
				title: `[site-sections] ${folder}`
			})
		)
		.pipe(gulp.dest(path.join(paths.dest.js, folder)));
}

//The main function
let buildSiteSections = gulp.parallel(
	folders(paths.src, function(folder, done) {
		let compilesass = compileSASS.bind(null, folder),
			compilejs = compileJS.bind(null, folder), //module creation -- uses webpack
			concatjs = concatJS.bind(null, folder); //basic concat -- NOTE this feature wasn't available in webpack

		compilesass.displayName = `Compile SASS ${folder}`;
		compilejs.displayName = `Compile JS ${folder}`;
		concatjs.displayName = `Concat JS ${folder}`;

		if (process.env.NODE_ENV === "development") {
			gulp.watch(
				[
					path.join(paths.src, folder, "js/**/*.js"),
					`!js/${folder}@(.js|.jsx)`
				],
				concatjs
			);
		}

		let plan = gulp.series(compilesass, compilejs, concatjs);
		plan.displayName = `site-sections ${folder}`;
		return plan(done);
	})
);

buildSiteSections.displayName = "site-sections";
buildSiteSections.description = "site-sections";

export default buildSiteSections;
