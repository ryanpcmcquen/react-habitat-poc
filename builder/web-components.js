import gulp from "gulp";
//import gutil from "gulp-util";
import debug from "gulp-debug";
import named from "vinyl-named";
import rename from "gulp-rename";
import path from "path";
import gwebpack from "webpack-stream";
import webpack from "webpack";
import uglify from "gulp-uglify-es";
import lazypipe from "lazypipe";
import gulpif from "gulp-if";
import filter from "gulp-filter";
// NOTE: Custom module.
import folders from "./modules/build-folders";

import { containerPaths as paths } from "./config/paths.config";

function getUglifyOptions(folder) {
	return {
		output: {
			preamble: `/**
* !!! IMPORTANT !!!

* DO NOT EDIT THIS FILE DIRECTLY.
* Go to: ${path.join(__dirname, paths.src, folder)}

* To edit the correct files.
**/;

`,
			beautify: false
		}
	};
}

function buildComponent(folder) {
	var js = filter(["!node_modules/**/", "**/*.js"], {
		restore: true
	});
	var releasejs = lazypipe().pipe(uglify, getUglifyOptions(folder));

	return (
		gulp
			.src(path.join(paths.src, folder, folder + "@(.js|.jsx)"))
			// Attach file names to the gulp file records:
			.pipe(named())
			.pipe(gwebpack(require("./config/build.webpack.config"), webpack))
			.pipe(js)
			.pipe(gulpif(process.env.NODE_ENV === "production", releasejs()))
			.pipe(js.restore)
			.pipe(debug({ title: `[web-components] ${folder}` }))
			.pipe(gulp.dest(path.join(paths.dest.js, folder)))
	);
}

// The main function:
const buildWebComponents = gulp.parallel(
	folders(paths.src, function(folder, done) {
		let buildcomponent = buildComponent.bind(null, folder);
		buildcomponent.displayName = `Build Component ${folder}`;

		let plan = gulp.series(buildcomponent);
		plan.displayName = `web-components ${folder}`;
		return plan(done);
	})
);
buildWebComponents.displayName = "web-components";
buildWebComponents.description = "web-components";

export default buildWebComponents;
