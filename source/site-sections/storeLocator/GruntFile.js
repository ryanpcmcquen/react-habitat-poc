module.exports = function(grunt) {
	require("matchdep")
		.filterDev("grunt-*")
		.forEach(grunt.loadNpmTasks);
	grunt.config.init({
		pkg: grunt.file.readJSON("package.json"),
		notify_hooks: {
			options: {
				enabled: true,
				max_jshint_notifications: 5,
				title: "Sur la table - Store Locator"
			}
		},

		//- Concat JS into single files
		concat: {
			app: {
				src: [
					"js/app/*.js",
					"../bower_components/knockout/dist/knockout.js",
					"../bower_components/knockout-postbox/build/knockout-postbox.min.js",
					"../sltComponents/build/slt-storelocator/*.js"
				],
				dest: "js/._app.concat.js"
			},
			scripts: {
				src: ["js/plugins/*.js", "js/main.js"],
				dest: "js/._scripts.concat.js"
			},
			styles: {
				src: [
					"sass/build/*.css",
					"../sltComponents/build/slt-storelocator/*.css"
				],
				dest:
					"../../modules/Store/docroot/styles/storeLocator/styles.css"
			}
		},

		copy: {
			dev: {
				files: [
					{
						cwd: "js",
						expand: true,
						src: "._app.concat.js",
						dest:
							"../../modules/Store/docroot/scripts/storeLocator/",
						rename: function(dest, src) {
							return dest + "app.min.js";
						}
					},
					{
						cwd: "js",
						expand: true,
						src: "._scripts.concat.js",
						dest:
							"../../modules/Store/docroot/scripts/storeLocator/",
						rename: function(dest, src) {
							return dest + "scripts.min.js";
						}
					}
				]
			}
		},

		//- Uglify concatenated and other JS files
		uglify: {
			options: {
				banner:
					"/**\n * !!! IMPORTANT !!!\n\n * DO NOT EDIT THIS FILE DIRECTLY. \n * Go to: /working/code/[your release]/SurLaTable/workspace/ui_sources/storeLocator/\n\n * Then edit proper js file and run grunt from shared folder.\n**/;\n\n"
			},
			app: {
				files: {
					"../../modules/Store/docroot/scripts/storeLocator/app.min.js": [
						"<%= concat.app.dest %>"
					]
				}
			},
			scripts: {
				files: {
					"../../modules/Store/docroot/scripts/storeLocator/scripts.min.js": [
						"<%= concat.scripts.dest %>"
					]
				}
			}
		},

		//- Compile SASS
		sass: {
			dist: {
				options: {
					outputStyle: "compressed"
				},
				files: [
					{
						expand: true, //expands globs to get all the different files
						flatten: true, //Remove all path parts from generated dest paths.
						src: "sass/src/*.scss",
						dest: "sass/build/",
						ext: ".css"
					}
				]
			}
		},
		selector4096: {
			all: ["../../modules/Store/docroot/styles/storeLocator/*.css"]
		},
		clean: ["<%= concat.app.dest %>", "<%= concat.scripts.dest %>"],

		//- Notify when task is complete
		notify: {
			css_compile: {
				options: {
					title: "Node-Sass", // optional
					message: "Compile was successful" //required
				}
			},
			app_change: {
				options: {
					title: "Javascript", // optional
					message: "Concatenated and minifed successfully" //required
				}
			}
		},

		//- Watchers
		watch: {
			js: {
				files: ["<%= concat.app.src %>", "<%= concat.scripts.src %>"],
				tasks: ["notify:app_change", "app_change"]
			}
		},
		exec: {
			componentsWatch: {
				cwd: "../sltComponents/",
				cmd: "npm install && npm run dev"
			},
			components: {
				cwd: "../sltComponents/",
				cmd: "npm install && npm run dev:nowatch"
			}
		},
		concurrent: {
			dev: {
				tasks: [
					"exec:componentsWatch",
					["sass", "concat", "copy", "watch"]
				],
				options: {
					logConcurrentOutput: true
				}
			}
		}
	});

	require("time-grunt")(grunt);
	grunt.task.run("notify_hooks");
	//- REGISTER THE TASKS
	grunt.registerTask("default", ["sass", "concat", "uglify"]);
	grunt.registerTask("dev", ["concurrent:dev"]);
	grunt.registerTask("app_change", ["concat:app", "copy"]);
	grunt.registerTask("sass_change", ["sass", "concat:styles"]);
};
